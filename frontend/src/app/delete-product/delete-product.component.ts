import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-delete-product',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './delete-product.component.html',
  styleUrls: ['./delete-product.component.css']
})
export class DeleteProductComponent {
  productId!: number;
  product: any = null; // ğŸ”¹ A tÃ¶rlendÅ‘ termÃ©k adatai
  loading = true;
  error = false;
  successMessage: string | null = null;
  errorMessage: string | null = null;
  deleted = false;

  constructor(
    private route: ActivatedRoute,
    private http: HttpClient,
    private router: Router
  ) {}

  ngOnInit() {
    this.productId = Number(this.route.snapshot.paramMap.get('id'));
    this.fetchProduct();
  }

  // ğŸ”¹ LekÃ©rjÃ¼k a termÃ©k adatait
  fetchProduct() {
    const url = `http://192.168.100.147:8000/api/product/${this.productId}`;
    this.http.get(url).subscribe({
      next: (res: any) => {
        this.product = res.data ?? res; // backend szerkezetÃ©tÅ‘l fÃ¼ggÅ‘en
        this.loading = false;
      },
      error: (err) => {
        console.error('Hiba a termÃ©k lekÃ©rÃ©sekor:', err);
        this.error = true;
        this.loading = false;
      },
    });
  }

  // ğŸ”¹ TÃ¶rlÃ©s megerÅ‘sÃ­tÃ©se
    confirmDeletion() {
      console.log('âœ… confirmDeletion() meghÃ­vva');
      const url = `http://192.168.100.147:8000/api/destroyproduct/${this.productId}`;
      const token = localStorage.getItem('token');

      const headers = new HttpHeaders({
        'Authorization': `Bearer ${token}`,
      });

      this.http.delete(url, { headers }).subscribe({
        next: (res) => {
          console.log('Sikeresen tÃ¶rÃ¶lve', res);

          // âœ… VisszajelzÃ©s a felhasznÃ¡lÃ³nak
          this.successMessage = 'A hirdetÃ©sed sikeresen tÃ¶rÃ¶lve lett.';
          this.deleted = true;

          // âœ… Ãœzenet eltÃ¼ntetÃ©se 3 mp mÃºlva
          setTimeout(() => {
            this.successMessage = null;
            this.router.navigate(['/my-products']);
          }, 3000);

        },
        error: (err) => {
          console.error('Hiba a tÃ¶rlÃ©s sorÃ¡n', err);

          if (err.status === 403) {
            this.errorMessage = 'Nincs jogosultsÃ¡god ennek a hirdetÃ©snek a tÃ¶rlÃ©sÃ©re.';
          } else {
            this.errorMessage = 'Hiba tÃ¶rtÃ©nt a termÃ©k tÃ¶rlÃ©sekor. KÃ©rlek, prÃ³bÃ¡ld Ãºjra kÃ©sÅ‘bb.';
          }

          // âœ… Ãœzenet eltÃ¼ntetÃ©se 4 mp mÃºlva
          setTimeout(() => (this.errorMessage = null), 4000);
        },
      });
    }


  cancelDeletion() {
    this.router.navigate(['/my-products']);
  }



  isJson(value: string): boolean {
  try {
    JSON.parse(value);
    return true;
  } catch {
    return false;
  }
}

getFirstImage(value: string): string {
  try {
    const images = JSON.parse(value);
    return Array.isArray(images) && images.length > 0 ? images[0] : '';
  } catch {
    return '';
  }
}
}
